#include <Wire.h>
#include <MPU9250_asukiaaa.h>
#include <Servo.h> // Librería para el servomotor

// ——— Pines del HC-SR04 y LED ———
const int trigPin = 9;
const int echoPin = 8;
const int ledPin = 13;
const int distanciaUmbral = 20; // cm

// ——— Pines del L298N para Motores ———
// Motor A
const int A_IN1 = 7;
const int A_IN2 = 6;
const int A_ENA = 3; // PWM

// Motor B
const int B_IN3 = 5;
const int B_IN4 = 4;
const int B_ENB = 11; // PWM

// ——— Servo para mover sensor ultrasónico ———
const int pinServo = 10;
Servo servoSensor;

// ——— Objeto del sensor MPU-9250 ———
MPU9250_asukiaaa mpu;

// Variables de movimiento y orientación
float velocidadMotorA = 200;
float velocidadMotorB = 210;  
float anguloInclinacion = 0;
float anguloRobot = 0;

unsigned long tiempoAnterior = 0;
unsigned long tiempoTranscurrido = 0;
unsigned long tiempoInicioAvance = 0;

bool avanzando = false;

// ——— Setup ———
void setup() {
  Serial.begin(115200);

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(ledPin, OUTPUT);

  pinMode(A_IN1, OUTPUT);
  pinMode(A_IN2, OUTPUT);
  pinMode(A_ENA, OUTPUT);

  pinMode(B_IN3, OUTPUT);
  pinMode(B_IN4, OUTPUT);
  pinMode(B_ENB, OUTPUT);

  Wire.begin();
  mpu.setWire(&Wire);
  mpu.beginAccel();
  mpu.beginGyro();

  if (!mpu.accelUpdate() || !mpu.gyroUpdate()) {
    Serial.println("No se detecta el MPU-6500");
  } else {
    Serial.println("MPU-6500 detectado correctamente");
  }

  // Inicializar servo
  servoSensor.attach(pinServo);
  servoSensor.write(90); // Centro
}

// ——— Loop principal ———
void loop() {
  unsigned long tiempoActual = millis();
  tiempoTranscurrido = tiempoActual - tiempoAnterior;
  tiempoAnterior = tiempoActual;

  mpu.accelUpdate();
  mpu.gyroUpdate();
  anguloInclinacion = mpu.accelX();
  anguloRobot = mpu.gyroZ();

  long distance = medirDistancia();

  Serial.print("Distancia: ");
  Serial.print(distance);
  Serial.print(" cm | Inclinación: ");
  Serial.print(anguloInclinacion);
  Serial.print(" | Giro: ");
  Serial.println(anguloRobot);

  if (distance <= distanciaUmbral && distance > 0) {
    digitalWrite(ledPin, HIGH);
    Serial.println("Obstáculo detectado. Ejecutando maniobra...");
    evitarObstaculo();
    avanzando = false;
  } else {
    digitalWrite(ledPin, LOW);
    if (!avanzando) {
      tiempoInicioAvance = millis();
      avanzando = true;
    }
    avanzar();          
  }

  delay(100);
}

// ——— Medir distancia frontal ———
long medirDistancia() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH, 30000);
  return duration * 0.0344 / 2;
}

// ——— Avanzar ———
void avanzar() {
  digitalWrite(A_IN1, LOW);
  digitalWrite(A_IN2, HIGH);
  analogWrite(A_ENA, velocidadMotorA);

  digitalWrite(B_IN3, LOW);
  digitalWrite(B_IN4, HIGH);
  analogWrite(B_ENB, velocidadMotorB);
}

// ——— Retroceder ———
void retroceder(unsigned long duracion) {
  digitalWrite(A_IN1, HIGH);
  digitalWrite(A_IN2, LOW);
  analogWrite(A_ENA, velocidadMotorA);

  digitalWrite(B_IN3, HIGH);
  digitalWrite(B_IN4, LOW);
  analogWrite(B_ENB, velocidadMotorB);

  delay(duracion);
}

// ——— Detener motores ———
void detener() {
  analogWrite(A_ENA, 0);
  analogWrite(B_ENB, 0);
}

// ——— Girar a la izquierda ———
void girarIzquierda() {
  digitalWrite(A_IN1, LOW);
  digitalWrite(A_IN2, HIGH);
  analogWrite(A_ENA, velocidadMotorA);

  digitalWrite(B_IN3, HIGH);
  digitalWrite(B_IN4, LOW);
  analogWrite(B_ENB, velocidadMotorB);

  delay(500);
  detener();
}

// ——— Girar a la derecha ———
void girarDerecha() {
  digitalWrite(A_IN1, HIGH);
  digitalWrite(A_IN2, LOW);
  analogWrite(A_ENA, velocidadMotorA);

  digitalWrite(B_IN3, LOW);
  digitalWrite(B_IN4, HIGH);
  analogWrite(B_ENB, velocidadMotorB);

  delay(500);
  detener();
}

// ——— Evitar obstáculo ———
void evitarObstaculo() {
  while (true) {
    retroceder(300);
    detener();
    delay(200);

    // Medir izquierda
    servoSensor.write(150);
    delay(500);
    long distanciaIzquierda = medirDistancia();

    // Medir derecha
    servoSensor.write(60);
    delay(500);
    long distanciaDerecha = medirDistancia();

    // Volver al centro
    servoSensor.write(90);
    delay(200);

    Serial.print("Izquierda: ");
    Serial.print(distanciaIzquierda);
    Serial.print(" cm | Derecha: ");
    Serial.print(distanciaDerecha);
    Serial.println(" cm");

    if (distanciaIzquierda > distanciaDerecha) {
      Serial.println("Girando a la izquierda...");
      girarIzquierda();
    } else {
      Serial.println("Girando a la derecha...");
      girarDerecha();
    }

    delay(300);

    long nuevaDistancia = medirDistancia();
    Serial.print("Nueva distancia frontal: ");
    Serial.println(nuevaDistancia);

    if (nuevaDistancia > distanciaUmbral || nuevaDistancia == 0) {
      Serial.println("Camino despejado. Continuando...");
      break;
    } else {
      Serial.println("Obstáculo sigue presente. Repitiendo giro...");
    }
  }
}
